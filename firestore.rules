/**
 * @fileoverview Firestore Security Rules for VaultLock application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for all data. Each user has a dedicated data tree,
 * and only the authenticated user can access their own data. All write operations are validated against
 * the authenticated user's ID to prevent unauthorized data modification.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, with vault items stored in /users/{userId}/vault_items/{vaultItemId}.
 * This structure allows for simple, path-based authorization rules.
 *
 * Key Security Decisions:
 * - User listing is implicitly disallowed as there's no top-level listing operation on /users.
 * - All write operations require authentication (no public writes).
 * - Data validation is limited to relational integrity (e.g., userId in vault items must match the path).
 * - No complex role-based access control is implemented in this initial version.
 *
 * Denormalization for Authorization:
 * The `userId` field is denormalized into the `VaultItem` documents to enforce path-based ownership, preventing
 * the need for costly `get()` operations to verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with UID 'user_abc' can create their own profile if the userId matches their UID.
     * @allow (get, update, delete) - Authenticated user with UID 'user_abc' can get, update, or delete their own profile (where userId == 'user_abc').
     * @deny (create, get, update, delete) - Any other user attempting to access this profile (e.g., UID 'other_user').
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for vault items. Only the authenticated user can manage their own vault items.
     * @path /users/{userId}/vault_items/{vaultItemId}
     * @allow (create) - Authenticated user with UID 'user_abc' can create a vault item under their user ID.
     * @allow (get, list, update, delete) - Authenticated user with UID 'user_abc' can get, list, update, or delete a vault item under their user ID.
     * @deny (create, get, list, update, delete) - Any other user attempting to access this vault item.
     * @principle Restricts access to a user's own data tree. Validates relational integrity between documents.
     */
    match /users/{userId}/vault_items/{vaultItemId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}